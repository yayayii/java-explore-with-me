{
  "info": {
    "_postman_id": "3f73f816-2c86-44c8-8834-779eadf6d938",
    "name": "Explore With Me - Comment Feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "_exporter_id": "26522783"
  },
  "item": [
    {
      "name": "crud operations with comment",
      "item": [
        {
          "name": "create",
          "item": [
            {
              "name": "add comment1 with text = null",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": null\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "add comment1 with empty text",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "add comment1 with too big text",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"text1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "add comment1 from wrong author",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        pm.collectionVariables.set('uid', user.id+1);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"text1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "add comment1 to wrong event",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id+1)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"text1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "add comment1 to not published event",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 409\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"text1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "add comment1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
                      "});\r",
                      "pm.test(\"Has comment create response\", function () {\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "pm.test(\"Test comment 'id' field\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('id');\r",
                      "});\r",
                      "pm.test(\"Test comment 'text' field\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('text');\r",
                      "    pm.expect(jsonData.text, '\"text\" must be \"text1\"').to.eql('text1');\r",
                      "});\r",
                      "pm.test(\"Test comment 'authorName' field\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('authorName');\r",
                      "    pm.expect(jsonData.authorName, '\"authorName\" must be \"{{name}}\"').to.eql(pm.collectionVariables.get(\"name\"));\r",
                      "});\r",
                      "pm.test(\"Test event 'created' field\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('created');\r",
                      "    pm.expect(jsonData.created, '\"created\" must be not null').not.eql(null);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"name\", user.name);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"text1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "update",
          "item": [
            {
              "name": "edit comment1 with text = null",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": null\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "edit comment1 with empty text",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "edit comment1 with too big text",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"text1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "edit comment1 from non exist author",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set('uid', user.id+1);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"text1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "edit comment1 with wrong event",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id+1);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"newText1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "edit comment1 with wrong comment id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id+1);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"newText1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "edit comment1 from wrong author id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 409\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set(\"uid\", user.id-1);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"newText1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "edit comment1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
                      "});\r",
                      "pm.test(\"Has comment create response\", function () {\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "pm.test(\"Test comment 'text' field\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('text');\r",
                      "    pm.expect(jsonData.text, '\"text\" must be \"newText1\"').to.eql('newText1');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set(\"uid\", user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"newText1\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "delete",
          "item": [
            {
              "name": "delete comment1 from non exist author",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "}); "
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set('uid', user.id+1);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete comment1 with wrong event",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id+1);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete comment1 with wrong comment id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id+1);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete comment1 from wrong author id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 409\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set('uid', user.id-1);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete comment1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set('uid', user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}"
                    },
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete comment1 with wrong comment id by admin",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id+1);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/admin/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "delete comment1 by admin",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.publishEvent(event.id);\r",
                      "        const comment = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
                      "        pm.collectionVariables.set(\"comid\", comment.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/admin/comments/:commentId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "comments",
                    ":commentId"
                  ],
                  "variable": [
                    {
                      "key": "commentId",
                      "value": "{{comid}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "get event endpoint with comments",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
              "});\r",
              "pm.test(\"Has event get response\", function () {\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.test(\"Test event 'comments' field\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('comments');\r",
              "    pm.expect(jsonData.comments.length, '\"comments.length\" must be 2').to.eql(2);\r",
              "    pm.expect(jsonData.comments[0]).to.have.property('id');\r",
              "    pm.expect(jsonData.comments[1]).to.have.property('id');\r",
              "    pm.expect(jsonData.comments[0]).to.have.property('text');\r",
              "    pm.expect(jsonData.comments[0].text, '\"comments[0].text\" must be \"text1\"').to.eql('text1');\r",
              "    pm.expect(jsonData.comments[1]).to.have.property('text');\r",
              "    pm.expect(jsonData.comments[1].text, '\"comments[1].text\" must be \"text2\"').to.eql('text2');\r",
              "    pm.expect(jsonData.comments[0]).to.have.property('authorName');\r",
              "    pm.expect(jsonData.comments[0].authorName, '\"comments[0].authorName\" must be \"name1\"').to.eql(pm.collectionVariables.get(\"name\"));\r",
              "    pm.expect(jsonData.comments[1]).to.have.property('authorName');\r",
              "    pm.expect(jsonData.comments[1].authorName, '\"comments[1].authorName\" must be \"name1\"').to.eql(pm.collectionVariables.get(\"name\"));\r",
              "    pm.expect(jsonData.comments[0]).to.have.property('created');\r",
              "    pm.expect(jsonData.comments[0].created, '\"comments[0].created\" must be not null').not.eql(null);\r",
              "    pm.expect(jsonData.comments[1]).to.have.property('created');\r",
              "    pm.expect(jsonData.comments[1].created, '\"comments[1].created\" must be not null').not.eql(null);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        const comment1 = await api.addComment(user.id, event.id, rnd.getComment(\"text1\"));\r",
              "        const comment2 = await api.addComment(user.id, event.id, rnd.getComment(\"text2\"));\r",
              "        pm.collectionVariables.set(\"eid\", event.id);\r",
              "        pm.collectionVariables.set(\"name\", user.name);\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "    }\r",
              "};\r",
              "\r",
              "const interval = setInterval(() => {}, 1000);\r",
              "\r",
              "setTimeout(async () => \r",
              "    {\r",
              "        try {\r",
              "            // выполняем наш скрипт\r",
              "            await main();\r",
              "        } catch (e) {\r",
              "            console.error(e);\r",
              "        } finally {\r",
              "            clearInterval(interval);\r",
              "        }\r",
              "    },  \r",
              "    100 \r",
              ");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/events/:eventId",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "events",
            ":eventId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eid}}"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async addComment(userId, eventId, comment, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/comments\", comment, \"Ошибка при добавлении нового комментария: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getComment(text) {",
          "        return {",
          "            text: pm.variables.replaceIn(text)",
          "        }",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": "",
      "type": "string"
    },
    {
      "key": "uid",
      "value": "",
      "type": "string"
    },
    {
      "key": "eid",
      "value": "",
      "type": "string"
    },
    {
      "key": "comid",
      "value": "",
      "type": "string"
    }
  ]
}